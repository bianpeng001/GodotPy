import os
import os.path
import shutil

Import('env')
Import("env_modules")

print('init GodotPy...')

# 兼容一下路径
PYTHON_HOME = 'D:/OpenSource/cpython'
BOOST_HOME = 'D:/OpenSource/boost_1_82_0'

PYTHON_DLL = "python314.dll"

if not os.path.exists(PYTHON_HOME):
    PYTHON_HOME = 'H:/cpython'
if not os.path.exists(BOOST_HOME):
    BOOST_HOME = 'H:/boost_1_82_0'

def copy_if_expired(src_path, dst_path):
    dst_path = os.path.abspath(dst_path)
    src_path = os.path.abspath(src_path)
    
    if not os.path.exists(dst_path) or \
            os.path.getmtime(dst_path) < os.path.getmtime(src_path):
        print('copy', src_path, '->', dst_path)
        shutil.copyfile(src_path, dst_path)
    else:
        print('skip', dst_path)

def mkdir_if_not_exists(path):
    if not os.path.exists(path):
        os.mkdir(path)

# 准备工作, 复制python3.lib，因为后缀跟平台环境有关，但是我懒得弄了，复制改名算了
def GetReady():
    # 改在代码里面, #pragma comment(lib, "python3.lib")
    # 就不需要在这里重命名了, 不使用这个脚本来链接lib
    
    #Python3Lib = PYTHON_HOME + '/python3.lib'
    #Python3LibDst = PYTHON_HOME + '/python3' + env["LIBSUFFIX"]
    #copy_if_expired(Python3Lib, Python3LibDst)

    
    
    file_list = (
            'sqlite3.dll',
            '_sqlite3.pyd',
            '_socket.pyd',
            '_asyncio.pyd',
            '_overlapped.pyd',
            '_multiprocessing.pyd',
            '_queue.pyd',
            '_decimal.pyd',
            )
    mkdir_if_not_exists('../../bin')
    mkdir_if_not_exists('../../bin/DLLs')

    copy_if_expired(PYTHON_HOME + '/python.exe', '../../bin/python.exe')
    copy_if_expired(PYTHON_HOME + f'/{PYTHON_DLL}', f'../../bin/{PYTHON_DLL}')
    
    for dst_file in file_list:
        src_file = dst_file.replace('.pyd', '.dll')
        copy_if_expired(PYTHON_HOME + '/' + src_file, '../../bin/DLLs/' + dst_file)

GetReady()

incs = [
    PYTHON_HOME + '/Include',
    PYTHON_HOME + '/Include/internal',
    PYTHON_HOME + '/Godot',
    BOOST_HOME,
]

env.Append(LIBPATH = [
    PYTHON_HOME,
])
env.Append(LIBS = [
    #'python3',
])
env.Append(CPPPATH = incs)

godotpy_module = env_modules.Clone()
godotpy_module.Append(CPPPATH = incs)
godotpy_module.Append(CPPDEFINES =[

    # 这几个是编译python用到的，嵌入python不必
    #'Py_BUILD_CORE',
    #'Py_BUILD_CORE_BUILTIN',
    #'Py_ENABLE_SHARED',
    
    # 这几个必须了，因为构造python用了，嵌入是也要开
    #'WITH_MIMALLOC=1',
    #'Py_GIL_DISABLED=1'
    ])
godotpy_module.add_source_files(env.modules_sources, "src/*.cpp")


#
# build_windows.bat
# bin\godot.windows.editor.dev.x86_64.console.exe --path h:\GodotPy\Demo -w -e
#
# eval `ssh-agent`
# ssh-add -k bianpeng001_home.pub
#
# ssh-keygen.exe -t ed25519 -C "bianpeng001@163.com"
#
#
# bin\godot.windows.editor.dev.x86_64.console.exe --path h:\GodotPy\Demo -w -e
# bin\godot.windows.editor.dev.x86_64.console.exe --path h:\GodotPy\Demo -w --export-pack "Windows Desktop" .\Output\Demo.pck
#
#

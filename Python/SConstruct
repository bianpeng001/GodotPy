#!/usr/bin/env python

import os
import os.path

EnsureSConsVersion(3, 0, 0)
EnsurePythonVersion(3, 6)


TOKENIZER_OBJS = [
    'Parser/lexer/buffer.c',
	'Parser/lexer/lexer.c',
	'Parser/lexer/state.c',
	'Parser/tokenizer/file_tokenizer.c',
	'Parser/tokenizer/readline_tokenizer.c',
	'Parser/tokenizer/string_tokenizer.c',
	'Parser/tokenizer/utf8_tokenizer.c',
	'Parser/tokenizer/helpers.c',
]
PEGEN_OBJS = [
    'Parser/action_helpers.c',
    'Parser/parser.c',
    'Parser/pegen.c',
    'Parser/pegen_errors.c',
    'Parser/peg_api.c',
    'Parser/string_parser.c',
]

PARSER_OBJS = [
    'Parser/token.c',
    'Parser/myreadline.c',
] + PEGEN_OBJS + TOKENIZER_OBJS

OBJECT_OBJS = [
    "Objects/abstract.c",
    "Objects/boolobject.c",
    "Objects/bytearrayobject.c",
    "Objects/bytes_methods.c",
    "Objects/bytesobject.c",
    "Objects/call.c",
    "Objects/capsule.c",
    "Objects/cellobject.c",
    "Objects/classobject.c",
    "Objects/codeobject.c",
    "Objects/complexobject.c",
    "Objects/descrobject.c",
    "Objects/dictobject.c",
    "Objects/enumobject.c",
    "Objects/exceptions.c",
    "Objects/fileobject.c",
    "Objects/floatobject.c",
    "Objects/frameobject.c",
    "Objects/funcobject.c",
    "Objects/genericaliasobject.c",
    "Objects/genobject.c",
    "Objects/iterobject.c",
    "Objects/listobject.c",
    "Objects/longobject.c",
    "Objects/memoryobject.c",
    "Objects/methodobject.c",
    "Objects/moduleobject.c",
    "Objects/namespaceobject.c",
    "Objects/object.c",
    "Objects/obmalloc.c",
    "Objects/odictobject.c",
    "Objects/picklebufobject.c",
    "Objects/rangeobject.c",
    "Objects/setobject.c",
    "Objects/sliceobject.c",
    "Objects/structseq.c",
    "Objects/tupleobject.c",
    "Objects/typeobject.c",
    "Objects/typevarobject.c",
    "Objects/unicodectype.c",
    "Objects/unicodeobject.c",
    "Objects/unionobject.c",
    "Objects/weakrefobject.c",
]
PYTHON_OBJS = [
    "Python/_warnings.c",
    "Python/Python-ast.c",
    "Python/Python-tokenize.c",
    "Python/asdl.c",
    "Python/assemble.c",
    "Python/ast.c",
    "Python/ast_opt.c",
    "Python/ast_unparse.c",
    "Python/bltinmodule.c",
    "Python/brc.c",
    "Python/ceval.c",
    "Python/codecs.c",
    "Python/codegen.c",
    "Python/compile.c",
    "Python/context.c",
    "Python/critical_section.c",
    "Python/crossinterp.c",
    "Python/dynamic_annotations.c",
    "Python/errors.c",
    "Python/flowgraph.c",
    "Python/frame.c",
    "Python/future.c",
    "Python/gc.c",
    "Python/gc_free_threading.c",
    "Python/gc_gil.c",
    "Python/getargs.c",
    "Python/getcompiler.c",
    "Python/getcopyright.c",
    "Python/getplatform.c",
    "Python/getversion.c",
    "Python/ceval_gil.c",
    "Python/hamt.c",
    "Python/hashtable.c",
    "Python/import.c",
    "Python/importdl.c",
    "Python/index_pool.c",
    "Python/initconfig.c",
    "Python/interpconfig.c",
    "Python/instrumentation.c",
    "Python/instruction_sequence.c",
    "Python/intrinsics.c",
    "Python/jit.c",
    "Python/legacy_tracing.c",
    "Python/lock.c",
    "Python/marshal.c",
    "Python/modsupport.c",
    "Python/mysnprintf.c",
    "Python/mystrtoul.c",
    "Python/object_stack.c",
    "Python/optimizer.c",
    "Python/optimizer_analysis.c",
    "Python/optimizer_symbols.c",
    "Python/parking_lot.c",
    "Python/pathconfig.c",
    "Python/preconfig.c",
    "Python/pyarena.c",
    "Python/pyctype.c",
    "Python/pyfpe.c",
    "Python/pyhash.c",
    "Python/pylifecycle.c",
    "Python/pymath.c",
    "Python/pystate.c",
    "Python/pythonrun.c",
    "Python/pytime.c",
    "Python/qsbr.c",
    "Python/bootstrap_hash.c",
    "Python/specialize.c",
    "Python/structmember.c",
    "Python/symtable.c",
    "Python/sysmodule.c",
    "Python/thread.c",
    "Python/traceback.c",
    "Python/tracemalloc.c",
    "Python/uniqueid.c",
    "Python/getopt.c",
    "Python/pystrcmp.c",
    "Python/pystrtod.c",
    "Python/pystrhex.c",
    "Python/dtoa.c",
    "Python/formatter_unicode.c",
    "Python/fileutils.c",
    "Python/suggestions.c",
    "Python/perf_trampoline.c",
    "Python/perf_jit_trampoline.c",
]
MODULE_OBJS = [
    'Modules/main.c',
    'Modules/gcmodule.c',
]
IOModules = [
    'Modules/_io/_iomodule.c',
    'Modules/_io/iobase.c',
    'Modules/_io/fileio.c',
    'Modules/_io/bufferedio.c',
    'Modules/_io/textio.c',
    'Modules/_io/bytesio.c',
    'Modules/_io/stringio.c',
]
Modules = [
    "Modules/_abc.c",
    "Modules/_bisectmodule.c",
    "Modules/_codecsmodule.c",
    "Modules/_collectionsmodule.c",
    "Modules/_contextvarsmodule.c",
    "Modules/_datetimemodule.c",
    "Modules/_functoolsmodule.c",
    "Modules/_hacl/Hacl_Hash_MD5.c",
    "Modules/_hacl/Hacl_Hash_SHA1.c",
    "Modules/_hacl/Hacl_Hash_SHA2.c",
    "Modules/_hacl/Hacl_Hash_SHA3.c",

    "Modules/_hacl/Hacl_Hash_Blake2b.c",
    "Modules/_hacl/Hacl_Hash_Blake2s.c",
    "Modules/blake2module.c",
    # "Modules/_hacl/Hacl_Hash_Blake2b_Simd256.c",
    # "Modules/_hacl/Hacl_Hash_Blake2s_Simd128.c",
    "Modules/_hacl/Lib_Memzero0.c",

    "Modules/_heapqmodule.c",
    "Modules/_json.c",
    "Modules/_localemodule.c",
    "Modules/_lsprof.c",
    "Modules/_opcode.c",
    "Modules/_operator.c",
    "Modules/_pickle.c",
    "Modules/_randommodule.c",
    "Modules/_sre/sre.c",
    "Modules/_stat.c",
    "Modules/_statisticsmodule.c",
    "Modules/_struct.c",
    "Modules/_suggestions.c",
    "Modules/_threadmodule.c",
    "Modules/_tracemalloc.c",
    "Modules/_typingmodule.c",
    "Modules/_weakref.c",
    "Modules/arraymodule.c",
    "Modules/atexitmodule.c",
    "Modules/binascii.c",
    "Modules/cjkcodecs/_codecs_cn.c",
    "Modules/cjkcodecs/_codecs_hk.c",
    "Modules/cjkcodecs/_codecs_tw.c",
    "Modules/cjkcodecs/multibytecodec.c",
    "Modules/cmathmodule.c",
    "Modules/errnomodule.c",
    "Modules/faulthandler.c",
    "Modules/itertoolsmodule.c",
    "Modules/mathmodule.c",
    "Modules/md5module.c",
    "Modules/mmapmodule.c",
    "Modules/posixmodule.c",
    "Modules/rotatingtree.c",
    "Modules/sha1module.c",
    "Modules/sha2module.c",
    "Modules/sha3module.c",
    "Modules/signalmodule.c",
    "Modules/symtablemodule.c",
    "Modules/_sysconfig.c",
    "Modules/timemodule.c",
    "Modules/xxsubtype.c",
    "Modules/_interpretersmodule.c",
    "Modules/_interpchannelsmodule.c",
    "Modules/_interpqueuesmodule.c",
    

]

# static.c 里面include了上面全部
# static.c 被obmalloc里面include
# 所以, 这里啥都不用加了!!!
MIMALLOC_OBJS = [
    #"Objects/mimalloc/alloc-aligned.c",
    #"Objects/mimalloc/alloc-posix.c",
    #"Objects/mimalloc/alloc.c",
    #"Objects/mimalloc/arena.c",
    #"Objects/mimalloc/bitmap.c",
    #"Objects/mimalloc/heap.c",
    #"Objects/mimalloc/init.c",
    #"Objects/mimalloc/options.c",
    #"Objects/mimalloc/os.c",
    #"Objects/mimalloc/page.c",
    #"Objects/mimalloc/random.c",
    #"Objects/mimalloc/segment-map.c",
    #"Objects/mimalloc/segment.c",
    #"Objects/mimalloc/stats.c",
    #"Objects/mimalloc/prim/prim.c",


    #"Objects/mimalloc/static.c",
    
]
# PC平台相关的几个文件
Platform_Modules = [
    'Modules/_io/winconsoleio.c',
    #'Modules/_winapi.c',
    
    'Python/dynload_win.c',
    'PC/invalid_parameter_handler.c',
    'PC/dl_nt.c',
    'PC/winreg.c',
    #'PC/msvcrtmodule.c',
]

ALL_MODULES = MODULE_OBJS + IOModules + Modules + Platform_Modules + MIMALLOC_OBJS

LIBRARY_OBJS_OMIT_FROZEN = [
    'Modules/getbuildinfo.c'
] + \
PARSER_OBJS + \
OBJECT_OBJS + \
PYTHON_OBJS 

# 第三方依赖
ZLIB = 'd:/OpenSource/zlib'
SQLITE3 = 'd:/OpenSource/sqlite3'

is_release = ARGUMENTS.get('release', True)
#is_release = False

# module
ModuleName = "python314"
PyLibName = ModuleName + ".lib"

PY_VER = '3.14'
cppdefines = [
    '_USRDLL',
    'WIN32',
    '_M_X64',
    '_WIN64',
    '_DEBUG', # 没有这个会崩溃！！
    # winreg.c require MACRO CONDITION
    #'MS_WINDOWS_DESKTOP',

    'Py_BUILD_CORE',
    'Py_BUILD_CORE_BUILTIN',
    'Py_ENABLE_SHARED',
    'WITH_FREELISTS',

    # jit, invoke REGEN_JIT_COMMAND to configure!!!
    # "D_Py_JIT",
    
    # 从python312.zip里面加载标准模块
    '_Py_HAVE_ZLIB',

    ('VPATH', f'\\"{ModuleName}\\"'),
    ('PY3_DLLNAME', f'L\\"{ModuleName}\\"'),
    ('MS_DLL_ID', f'TEXT(\\"{PY_VER}\\")'),
    ('PREFIX', f'\\"prefix\\"'),
    ('EXEC_PREFIX', f'\\"exec_prefix\\"'),
    ('VERSION', f'\\"{PY_VER}\\"'),
    ('PLATLIBDIR', f'\\"GodotPyLib\\"'),
    ]
if not is_release:
    cppdefines.append('_DEBUG')

libs = [
    'Bcrypt',
    'Version',
    'Pathcch',
    'Advapi32',
    'Ws2_32',
    
]
incs = [
    '.',
    './Include',
    './Include/internal',
    './Include/internal/mimalloc',
    './Modules/_hacl/include',
    './Godot',
    ZLIB,
]

# frozen modules
# Standard build process:
# 1) compile minimal core objects for Py_Compile*() and PyMarshal_Write*().
# 2) build Programs/_freeze_module binary.
# 3) create frozen module headers for importlib and getpath.
# 4) build _bootstrap_python binary.
# 5) create remaining frozen module headers with
#    ``./_bootstrap_python Programs/_freeze_module.py``. The pure Python
#    script is used to test the cross compile code path.
# 6) deepfreeze modules with _bootstrap_python


# 编译器版本
# 14.3 = Visual Studio 2022
# 14.2 = Visual Studio 2019
env = Environment(MSVC_VERSION="14.3", TARGET_ARCH='x86_64')
#env = Environment()
env2 = env.Clone()

env.Execute('echo begin frozen...')
env.Append(CPPDEFINES = cppdefines)
env.Append(CPPPATH = incs)

if is_release:
    env.Append(CCFLAGS = [
        '/MD',
        #'/O2','/MP', '/GS', '/GL',
        #'/W3', '/Zc:wchar_t', '/Gm-', '/Gd', '/GF', '/Gy', '/FC',
        #'/Zc:inline', '/fp:precise', '/Zc:forScope',
    ])
else:
    env.Append(CCFLAGS = [
        '/MDd', 
        #'/Zi', '/Od', '/FC', 
    ])
    env.Append(LINKFLAGS = ['/DEBUG:FULL',])

env.Append(LIBPATH = [
    
])

Frozen = 'Programs/_frozen.exe'
FrozenExe = env.Program(Frozen,
    source = LIBRARY_OBJS_OMIT_FROZEN + ALL_MODULES + [
        'Programs/_freeze_module.c',
        'Modules/getpath_noop.c',
        'Godot/config.c',
        'Godot/zlibmodule.c',
        #'PC/frozen_dllmain.c',
    ],
    CPPPATH = incs,
    LIBS = libs
    )

BootstrapPython = './_bootstrap_python.exe'
BootstrapExe = env.Program(BootstrapPython,
    source = LIBRARY_OBJS_OMIT_FROZEN + ALL_MODULES + [
        'Programs/_bootstrap_python.c',
        'Modules/getpath.c',
        'Godot/config.c',
        'Godot/zlibmodule.c',
    ],
    CPPPATH = incs,
    LIBS = libs
)

def run(cmd):
    print(cmd)
    os.system(cmd)

def run_frozen(**kw):
    if os.path.exists(Frozen):
        filename = '{0}'.format(Frozen.replace('/', '\\'))
        run(f'{filename} getpath Modules/getpath.py Python/frozen_modules/getpath.h')
        run(f'{filename} importlib._bootstrap Lib/importlib/_bootstrap.py Python/frozen_modules/importlib._bootstrap.h')
        run(f'{filename} importlib._bootstrap_external Lib/importlib/_bootstrap_external.py Python/frozen_modules/importlib._bootstrap_external.h')
        run(f'{filename} zipimport Lib/zipimport.py Python/frozen_modules/zipimport.h')

GenFrozen = env.Command(
    target = 'Python/frozen_modules/getpath.h',
    source = Frozen,
    action = run_frozen
    )

env.Requires(GenFrozen, FrozenExe)

#def run_bootstrap(**kw):
def run_bootstrap(**kw):
    if os.path.exists(BootstrapPython):
        filename = '{0}'.format(BootstrapPython.replace('/', '\\'))
        run(f'{filename} Tools/build/deepfreeze.py ' +
            'Python/frozen_modules/importlib._bootstrap.h:importlib._bootstrap ' +\
            'Python/frozen_modules/importlib._bootstrap_external.h:importlib._bootstrap_external ' +\
            'Python/frozen_modules/zipimport.h:zipimport ' +\
            'Python/frozen_modules/abc.h:abc ' +\
            'Python/frozen_modules/codecs.h:codecs ' +\
            'Python/frozen_modules/io.h:io ' +\
            'Python/frozen_modules/_collections_abc.h:_collections_abc ' +\
            'Python/frozen_modules/_sitebuiltins.h:_sitebuiltins ' +\
            'Python/frozen_modules/genericpath.h:genericpath ' +\
            'Python/frozen_modules/ntpath.h:ntpath ' +\
            'Python/frozen_modules/posixpath.h:posixpath ' +\
            'Python/frozen_modules/os.h:os ' +\
            'Python/frozen_modules/site.h:site ' +\
            'Python/frozen_modules/stat.h:stat ' +\
            'Python/frozen_modules/importlib.util.h:importlib.util ' +\
            'Python/frozen_modules/importlib.machinery.h:importlib.machinery ' +\
            'Python/frozen_modules/runpy.h:runpy ' +\
            'Python/frozen_modules/__hello__.h:__hello__ ' +\
            'Python/frozen_modules/__phello__.h:__phello__ ' +\
            'Python/frozen_modules/__phello__.ham.h:__phello__.ham ' +\
            'Python/frozen_modules/__phello__.ham.eggs.h:__phello__.ham.eggs ' +\
            'Python/frozen_modules/__phello__.spam.h:__phello__.spam ' +\
            'Python/frozen_modules/frozen_only.h:frozen_only ' +\
            '-o ' +\
            'Python/deepfreeze/deepfreeze.c'
        )
        filename += ' Programs/_freeze_module.py'
        run(f'{filename} abc Lib/abc.py Python/frozen_modules/abc.h')
        run(f'{filename} codecs Lib/codecs.py Python/frozen_modules/codecs.h')
        run(f'{filename} io Lib/io.py Python/frozen_modules/io.h')
        run(f'{filename} _collections_abc Lib/_collections_abc.py Python/frozen_modules/_collections_abc.h')
        run(f'{filename} _sitebuiltins Lib/_sitebuiltins.py Python/frozen_modules/_sitebuiltins.h')
        run(f'{filename} genericpath Lib/genericpath.py Python/frozen_modules/genericpath.h')
        run(f'{filename} ntpath Lib/ntpath.py Python/frozen_modules/ntpath.h')
        run(f'{filename} posixpath Lib/posixpath.py Python/frozen_modules/posixpath.h')
        run(f'{filename} os Lib/os.py Python/frozen_modules/os.h')
        run(f'{filename} site Lib/site.py Python/frozen_modules/site.h')
        run(f'{filename} stat Lib/stat.py Python/frozen_modules/stat.h')
        run(f'{filename} importlib.util Lib/importlib/util.py Python/frozen_modules/importlib.util.h')
        run(f'{filename} importlib.machinery Lib/importlib/machinery.py Python/frozen_modules/importlib.machinery.h')
        run(f'{filename} runpy Lib/runpy.py Python/frozen_modules/runpy.h')
        run(f'{filename} __hello__ Lib/__hello__.py Python/frozen_modules/__hello__.h')
        run(f'{filename} __phello__ Lib/__phello__/__init__.py Python/frozen_modules/__phello__.h')
        run(f'{filename} __phello__.ham Lib/__phello__/ham/__init__.py Python/frozen_modules/__phello__.ham.h')
        run(f'{filename} __phello__.ham.eggs Lib/__phello__/ham/eggs.py Python/frozen_modules/__phello__.ham.eggs.h')
        run(f'{filename} __phello__.spam Lib/__phello__/spam.py Python/frozen_modules/__phello__.spam.h')
        run(f'{filename} frozen_only Tools/freeze/flag.py Python/frozen_modules/frozen_only.h')

DEEP_FREEZE_FILE = 'Python/deepfreeze/deepfreeze.c'

#
# deepfreeze.c  暂时不需要了, 被mark shannon删了. 我这里也生成一个空文件代替. 先不删
#
def run_bootstrap_empty(**kwargs):
    with open(DEEP_FREEZE_FILE, 'w') as f:
        f.write('\n')

GenBootstrap = env.Command(
    target = DEEP_FREEZE_FILE,
    source = BootstrapPython,
    action = run_bootstrap_empty
)
env.Requires(GenBootstrap, BootstrapExe)

# python library
srcs = LIBRARY_OBJS_OMIT_FROZEN + ALL_MODULES + [
        # 偶然发现, DEEP_FREEZE_FILE是可选的, 倒也省得我弄一个空的文件
        # DEEP_FREEZE_FILE,
        'Python/frozen.c',
        'Modules/getpath.c',
        'Godot/config.c',
        
        'Modules/zlibmodule.c',
        ZLIB + '/adler32.c',
        ZLIB + '/crc32.c',
        ZLIB + '/trees.c',
        ZLIB + '/deflate.c',
        ZLIB + '/inflate.c',
        ZLIB + '/inftrees.c',
        ZLIB + '/inffast.c',
        ZLIB + '/zutil.c',
        ZLIB + '/infback.c',
        ZLIB + '/compress.c',
        ZLIB + '/uncompr.c',

    ]
PythonLib = env.SharedLibrary(ModuleName,
    source = srcs,
    CPPPATH = incs,
    LIBS = libs,
)
#env.Requires(PythonLib, [GenFrozen, GenBootstrap])
env.Requires(PythonLib, [])

# generate vsproject
env.MSVSProject(target = ModuleName + env['MSVSPROJECTSUFFIX'],
    source = srcs,
    CPPPATH = incs,
    buildtarget = ModuleName + '.dll',
    variant = 'Debug|x64'
)

#
# env2, 生成子模块, 区别一下编译选项
#

env2.Append(CPPPATH = incs)
if is_release:
    env2.Append(CCFLAGS = ['/O2', '/MD'])
    
# 资源文件,包含app的图标 -> python3.res
PythonExeRes = env2.RES('python3.rc')

# python.exe
PythonExe = env2.Program('python.exe',
    source = [
        'Programs/python.c',
        'python3.res'
    ],
    CPPPATH = incs,
    resources = [],
    LIBS = [PyLibName,]
)
# 加一下依赖关系, 保证先后执行顺序
env2.Requires(PythonExe, [PythonLib, PythonExeRes])

#
# sqlit3 模块, 单独的dll(复制host.exe同目录下, _sqlite3.pyd)
#
def build_sqlite3_pyd():
    # build sqlite3
    # 单独的dll
    sqlite3 = env2.SharedLibrary('sqlite3',
        source = [SQLITE3 +'/sqlite3.c'],
        CPPPATH = incs + [SQLITE3,],
        CPPDEFINES = [
            'Py_ENABLE_SHARED',
            'WITH_FREELISTS',
            

            'SQLITE_ENABLE_MATH_FUNCTIONS',
            'SQLITE_ENABLE_FTS4',
            'SQLITE_ENABLE_FTS5',
            'SQLITE_ENABLE_RTREE',
            'SQLITE_OMIT_AUTOINIT',
            ('SQLITE_API', '__declspec(dllexport)'),
            ],
        buildtarget = 'sqlite3.dll',
        LIBS = [PyLibName]
    )

    sqlite3_pyd = env2.SharedLibrary('_sqlite3',
        source = [
            'Modules/_sqlite/module.c',
            'Modules/_sqlite/connection.c',
            'Modules/_sqlite/cursor.c',
            'Modules/_sqlite/row.c',
            'Modules/_sqlite/blob.c',
            'Modules/_sqlite/statement.c',
            'Modules/_sqlite/microprotocols.c',
            'Modules/_sqlite/prepare_protocol.c',
            'Modules/_sqlite/util.c',
        ],
        CPPPATH = incs + [SQLITE3,],
        CPPDEFINES = [
            'Py_ENABLE_SHARED',
            'WITH_FREELISTS',

            'PY_SQLITE_HAVE_SERIALIZE',
            'PY_SQLITE_ENABLE_LOAD_EXTENSION',
        ],
        buildtarget = '_sqlite3.dll',
        LIBS = [
            'sqlite3.lib',
            PyLibName,
        ],
    )
build_sqlite3_pyd()

#
# lowlevel socket module: _socket.pyd
#
def build_socket_pyd():
    socket_pyd = env2.SharedLibrary('_socket',
        source = ['Modules/socketmodule.c'],
        CPPDEFINES = [
            'Py_ENABLE_SHARED',
            'WITH_FREELISTS',
        ],
        buildtarget = '_socket.dll',
        LIBS = [
            PyLibName,
            'Rpcrt4.lib',
            'Iphlpapi.lib',
            'Ws2_32.lib',
        ]
    )
build_socket_pyd()

#
# eventloop: _asyncio.pyd
#
def build_asyncio_pyd():
    asyncio_pyd = env2.SharedLibrary('_asyncio',
        source = ['Modules/_asynciomodule.c'],
        CPPDEFINES = [
            'Py_ENABLE_SHARED',
            'WITH_FREELISTS',
            
        ],
        buildtarget = '_asyncio.dll',
        LIBS = [ PyLibName, ]
    )
build_asyncio_pyd()

#
# _overlapped.pyd
#
def build_overlapped_pyd():
    overlapped_pyd = env2.SharedLibrary('_overlapped',
        source = ['Modules/overlapped.c'],
        CPPDEFINES = [
            'Py_ENABLE_SHARED',
            'WITH_FREELISTS',

        ],
        buildtarget = '_overlapped.dll',
        LIBS = [ PyLibName, "Ws2_32", ]
    )
build_overlapped_pyd()

#
# _multiprocessing.pyd
#
def build_multiprocessing_pyd():
    multiprocessing_pyd = env2.SharedLibrary('_multiprocessing',
        source = [
            'Modules/_multiprocessing/multiprocessing.c',
            'Modules/_multiprocessing/semaphore.c'
        ],
        CPPDEFINES = [
            'Py_ENABLE_SHARED',
            'WITH_FREELISTS',
            

        ],
        buildtarget = '_multiprocessing.dll',
        LIBS = [ PyLibName, "Ws2_32", ]
    )
build_multiprocessing_pyd()

#
# _queue.pyd
#
def build_queue_pyd():
    queue_pyd = env2.SharedLibrary('_queue',
        source = ['Modules/_queuemodule.c',],
        CPPDEFINES = [
            'Py_ENABLE_SHARED',
            'WITH_FREELISTS',
            

        ],
        buildtarget = '_queue.dll',
        LIBS = [ PyLibName, ]
    )
build_queue_pyd()

# _decimal.pyd
# NOTICE!! 因为搞不定vcdiv64.asm的变异, 在sons里面, 所以先去掉了. 缺少ml.exe.

def build_decimal_pyd():
    decimal_pyd = env2.SharedLibrary('_decimal',
        source = [
            "Modules/_decimal/_decimal.c",
            "Modules/_decimal/libmpdec/basearith.c",
            "Modules/_decimal/libmpdec/constants.c",
            "Modules/_decimal/libmpdec/context.c",
            "Modules/_decimal/libmpdec/convolute.c",
            "Modules/_decimal/libmpdec/crt.c",
            "Modules/_decimal/libmpdec/difradix2.c",
            "Modules/_decimal/libmpdec/fnt.c",
            "Modules/_decimal/libmpdec/fourstep.c",
            "Modules/_decimal/libmpdec/io.c",
            "Modules/_decimal/libmpdec/mpalloc.c",
            "Modules/_decimal/libmpdec/mpdecimal.c",
            "Modules/_decimal/libmpdec/mpsignal.c",
            "Modules/_decimal/libmpdec/numbertheory.c",
            "Modules/_decimal/libmpdec/sixstep.c",
            "Modules/_decimal/libmpdec/transpose.c",
        ],
        CPPDEFINES = [
            'Py_ENABLE_SHARED',
            'WITH_FREELISTS',
            
            ('CONFIG_64', 1),
            ('ANSI', 1),
        ],
        CPPPATH = incs + [ './Modules/_decimal', './Modules/_decimal/libmpdec', ],
        buildtarget = '_decimal.dll',
        LIBS = [ PyLibName,
            "advapi32.lib",
            "shell32.lib",
            "ole32.lib",
            "oleaut32.lib",
        ]
    )
build_decimal_pyd()

#
# _ctypes.pyd
#
def build_ctypes_pyd():
    def run_compile_asm():
        pass

    CompileAsm = env2.Command(
        target = 'xxx.obj',
        source = 'xxxx.asm',
        action = run_compile_asm
    )

    FFI_PATH = 'D:/OpenSource/libffi-3.4.4'
    ctypes_pyd = env2.SharedLibrary('_ctypes',
        source = [
            'Modules/_ctypes/_ctypes.c',
            'Modules/_ctypes/callbacks.c',
            'Modules/_ctypes/callproc.c',
            'Modules/_ctypes/cfield.c',
            'Modules/_ctypes/malloc_closure.c',
            'Modules/_ctypes/stgdict.c',

            FFI_PATH + '/src/closures.c',
            FFI_PATH + '/src/dlmalloc.c',
            FFI_PATH + '/src/ffi.c',
            FFI_PATH + '/src/prep_cif.c',
            FFI_PATH + '/src/types.c',
            FFI_PATH + '/src/raw_api.c',
            FFI_PATH + '/src/tramp.c',
        ],
        CPPDEFINES = [
            'Py_ENABLE_SHARED',
            'WITH_FREELISTS',
            
        ],
        CPPPATH = incs + [
            FFI_PATH + '/include',
        ],
        buildtarget = '_ctypes.dll',
        LIBS = [ PyLibName, ]
    )
    env2.Requires(ctypes_pyd, CompileAsm)

#build_ctypes_pyd()

#
# 感觉用不着了..
# 这个应该单独搞一个dll
# 'PC/python3dll.c', 
# ('PYTHON_DLL_NAME', f'{ModuleName}'),
#

# scons release=False


def regen_jit():
    cmd = "python.exe Tools/jit/build.py x64"
    run(cmd)



#
# 我们这里默认不开启
# enable_experimental_jit
#   no  jit_flags="", tier2_flags=""
#   yes jit_flags="-D_Py_JIT" tier2_flags="-D_Py_TIER2=1"
# see details refer to cpython/configure
#


#!/usr/bin/env python

import os
import os.path

EnsureSConsVersion(3, 0, 0)
EnsurePythonVersion(3, 6)

PARSER_OBJS = [
    'Parser/token.c',
    'Parser/pegen.c',
    'Parser/pegen_errors.c',
    'Parser/action_helpers.c',
    'Parser/parser.c',
    'Parser/string_parser.c',
    'Parser/peg_api.c',
    'Parser/myreadline.c',
    'Parser/tokenizer.c',
]
OBJECT_OBJS = [
    'Objects/abstract.c',
    'Objects/boolobject.c',
    'Objects/bytes_methods.c',
    'Objects/bytearrayobject.c',
    'Objects/bytesobject.c',
    'Objects/call.c',
    'Objects/capsule.c',
    'Objects/cellobject.c',
    'Objects/classobject.c',
    'Objects/codeobject.c',
    'Objects/complexobject.c',
    'Objects/descrobject.c',
    'Objects/enumobject.c',
    'Objects/exceptions.c',
    'Objects/genericaliasobject.c',
    'Objects/genobject.c',
    'Objects/fileobject.c',
    'Objects/floatobject.c',
    'Objects/frameobject.c',
    'Objects/funcobject.c',
    'Objects/interpreteridobject.c',
    'Objects/iterobject.c',
    'Objects/listobject.c',
    'Objects/longobject.c',
    'Objects/dictobject.c',
    'Objects/odictobject.c',
    'Objects/memoryobject.c',
    'Objects/methodobject.c',
    'Objects/moduleobject.c',
    'Objects/namespaceobject.c',
    'Objects/object.c',
    'Objects/obmalloc.c',
    'Objects/picklebufobject.c',
    'Objects/rangeobject.c',
    'Objects/setobject.c',
    'Objects/sliceobject.c',
    'Objects/structseq.c',
    'Objects/tupleobject.c',
    'Objects/typeobject.c',
    'Objects/unicodeobject.c',
    'Objects/unicodectype.c',
    'Objects/unionobject.c',
    'Objects/weakrefobject.c',
]
PYTHON_OBJS = [
    'Python/_warnings.c',
    'Python/Python-ast.c',
    'Python/Python-tokenize.c',
    'Python/asdl.c',
    'Python/ast.c',
    'Python/ast_opt.c',
    'Python/ast_unparse.c',
    'Python/bltinmodule.c',
    'Python/ceval.c',
    'Python/codecs.c',
    'Python/compile.c',
    'Python/context.c',
    'Python/dynamic_annotations.c',
    'Python/errors.c',
    'Python/frame.c',
    'Python/future.c',
    'Python/getargs.c',
    'Python/getcompiler.c',
    'Python/getcopyright.c',
    'Python/getplatform.c',
    'Python/getversion.c',
    'Python/ceval_gil.c',
    'Python/hamt.c',
    'Python/hashtable.c',
    'Python/import.c',
    'Python/importdl.c',
    'Python/initconfig.c',
    'Python/intrinsics.c',
    'Python/marshal.c',
    'Python/modsupport.c',
    'Python/mysnprintf.c',
    'Python/mystrtoul.c',
    'Python/pathconfig.c',
    'Python/preconfig.c',
    'Python/pyarena.c',
    'Python/pyctype.c',
    'Python/pyfpe.c',
    'Python/pyhash.c',
    'Python/pylifecycle.c',
    'Python/pymath.c',
    'Python/pystate.c',
    'Python/pythonrun.c',
    'Python/pytime.c',
    'Python/bootstrap_hash.c',
    'Python/specialize.c',
    'Python/structmember.c',
    'Python/symtable.c',
    'Python/sysmodule.c',
    'Python/thread.c',
    'Python/traceback.c',
    'Python/getopt.c',
    'Python/pystrcmp.c',
    'Python/pystrtod.c',
    'Python/pystrhex.c',
    'Python/dtoa.c',
    'Python/formatter_unicode.c',
    'Python/fileutils.c',
    'Python/suggestions.c',
    'Python/perf_trampoline.c',
]
MODULE_OBJS = [
    'Modules/main.c',
    'Modules/gcmodule.c',
]
IOModules = [
    'Modules/_io/_iomodule.c',
    'Modules/_io/iobase.c',
    'Modules/_io/fileio.c',
    'Modules/_io/bufferedio.c',
    'Modules/_io/textio.c',
    'Modules/_io/bytesio.c',
    'Modules/_io/stringio.c',
]
Modules = [
    'Modules/signalmodule.c',
    'Modules/faulthandler.c',
    'Modules/_tracemalloc.c',
    'Modules/timemodule.c',
    'Modules/atexitmodule.c',
    'Modules/_abc.c',
    'Modules/arraymodule.c',
    'Modules/audioop.c',
    'Modules/binascii.c',
    'Modules/cmathmodule.c',
    'Modules/errnomodule.c',
    'Modules/_operator.c',
    'Modules/md5module.c',
    'Modules/sha1module.c',
    'Modules/sha256module.c',
    'Modules/sha512module.c',
    'Modules/_sha3/sha3module.c',
    'Modules/_statisticsmodule.c',
    'Modules/_typingmodule.c',
    'Modules/mathmodule.c',
    'Modules/_opcode.c',
    'Modules/_lsprof.c',
    'Modules/_weakref.c',
    'Modules/rotatingtree.c',
    'Modules/_randommodule.c',
    'Modules/itertoolsmodule.c',
    'Modules/_collectionsmodule.c',
    'Modules/_heapqmodule.c',
    'Modules/_bisectmodule.c',
    'Modules/symtablemodule.c',
    'Modules/_sre/sre.c',
    'Modules/_datetimemodule.c',
    'Modules/_json.c',
    'Modules/_functoolsmodule.c',
    'Modules/_pickle.c',
    'Modules/_stat.c',
    'Modules/_contextvarsmodule.c',
    'Modules/_threadmodule.c',
    'Modules/_codecsmodule.c',
    'Modules/_struct.c',
    
    'Modules/cjkcodecs/multibytecodec.c',
    'Modules/cjkcodecs/_codecs_cn.c',

    'Modules/posixmodule.c',
    'Modules/_io/winconsoleio.c',
    'PC/invalid_parameter_handler.c',
    'PC/winreg.c',
    'Python/dynload_win.c',
    'PC/dl_nt.c',
]

LIBRARY_OBJS_OMIT_FROZEN = [
    'Modules/getbuildinfo.c'
] + PARSER_OBJS + OBJECT_OBJS + PYTHON_OBJS 

ModuleName = 'godot_python3'
cppdefines = [
    'Py_BUILD_CORE',
    'Py_BUILD_CORE_BUILTIN',
    'Py_ENABLE_SHARED',

    '_DEBUG',

    ('VPATH', f'\\"{ModuleName}\\"'),
    ('PY3_DLLNAME', f'\\"{ModuleName}\\"'),
    ('MS_DLL_ID', 'TEXT(\\"3.12\\")'),
    ('PREFIX', f'\\"xx\\"'),
    ('EXEC_PREFIX', f'\\"xx\\"'),
    ('VERSION', f'\\"3.12\\"'),
    ('PLATLIBDIR', f'\\"Lib\\"'),
    ]
libs = [
    'Bcrypt',
    'Version',
    'Pathcch',
    'Advapi32',
    'Ws2_32',
]
includes = [
    '.',
    './Include',
    './Include/internal',
    './Godot',
]

# frozen modules
# Standard build process:
# 1) compile minimal core objects for Py_Compile*() and PyMarshal_Write*().
# 2) build Programs/_freeze_module binary.
# 3) create frozen module headers for importlib and getpath.
# 4) build _bootstrap_python binary.
# 5) create remaining frozen module headers with
#    ``./_bootstrap_python Programs/_freeze_module.py``. The pure Python
#    script is used to test the cross compile code path.
# 6) deepfreeze modules with _bootstrap_python



env = Environment()
env.Execute('echo begin frozen...')
env.Append(CPPDEFINES = cppdefines)
env.Append(CPPPATH = includes)
env.Append(CCFLAGS = [
    #'/O2',
    '/Zi',
])
env.Append(LINKFLAGS = [
    '/debug:full',
])

FrozenName = 'Programs/_frozen.exe'
env.Program(FrozenName,
    source = LIBRARY_OBJS_OMIT_FROZEN + MODULE_OBJS + Modules + IOModules + [
        'Programs/_freeze_module.c',
        'Modules/getpath_noop.c',
        'Godot/config.c',
    ],
    cpppaths = includes,
    LIBS = libs
    )

env.Program('_bootstrap_python',
    source = LIBRARY_OBJS_OMIT_FROZEN + MODULE_OBJS + Modules + IOModules + [
        'Programs/_bootstrap_python.c',
        'Modules/getpath.c',
        'Godot/config.c',
    ],
    cpppaths = includes,
    LIBS = libs
)

def run(cmd):
    print(cmd)
    os.system(cmd)

print('generate freeze files')
FREEZE_MODULE_BOOTSTRAP = '{0}'.format(FrozenName.replace('/', '\\'))
if os.path.exists(FREEZE_MODULE_BOOTSTRAP):
    os.system(f'{FREEZE_MODULE_BOOTSTRAP} getpath Modules/getpath.py Python/frozen_modules/getpath.h')
    os.system(f'{FREEZE_MODULE_BOOTSTRAP} importlib._bootstrap Lib/importlib/_bootstrap.py Python/frozen_modules/importlib._bootstrap.h')
    os.system(f'{FREEZE_MODULE_BOOTSTRAP} importlib._bootstrap_external Lib/importlib/_bootstrap_external.py Python/frozen_modules/importlib._bootstrap_external.h')
    os.system(f'{FREEZE_MODULE_BOOTSTRAP} zipimport Lib/zipimport.py Python/frozen_modules/zipimport.h')
    pass

FREEZE_MODULE = '.\\_bootstrap_python.exe'
if os.path.exists(FREEZE_MODULE):
    run(f'{FREEZE_MODULE} Tools/build/deepfreeze.py ' +
        'Python/frozen_modules/importlib._bootstrap.h:importlib._bootstrap ' +\
        'Python/frozen_modules/importlib._bootstrap_external.h:importlib._bootstrap_external ' +\
        'Python/frozen_modules/zipimport.h:zipimport ' +\
        'Python/frozen_modules/abc.h:abc ' +\
        'Python/frozen_modules/codecs.h:codecs ' +\
        'Python/frozen_modules/io.h:io ' +\
        'Python/frozen_modules/_collections_abc.h:_collections_abc ' +\
        'Python/frozen_modules/_sitebuiltins.h:_sitebuiltins ' +\
        'Python/frozen_modules/genericpath.h:genericpath ' +\
        'Python/frozen_modules/ntpath.h:ntpath ' +\
        'Python/frozen_modules/posixpath.h:posixpath ' +\
        'Python/frozen_modules/os.h:os ' +\
        'Python/frozen_modules/site.h:site ' +\
        'Python/frozen_modules/stat.h:stat ' +\
        'Python/frozen_modules/importlib.util.h:importlib.util ' +\
        'Python/frozen_modules/importlib.machinery.h:importlib.machinery ' +\
        'Python/frozen_modules/runpy.h:runpy ' +\
        'Python/frozen_modules/__hello__.h:__hello__ ' +\
        'Python/frozen_modules/__phello__.h:__phello__ ' +\
        'Python/frozen_modules/__phello__.ham.h:__phello__.ham ' +\
        'Python/frozen_modules/__phello__.ham.eggs.h:__phello__.ham.eggs ' +\
        'Python/frozen_modules/__phello__.spam.h:__phello__.spam ' +\
        'Python/frozen_modules/frozen_only.h:frozen_only ' +\
        '-o ' +\
        'Python/deepfreeze/deepfreeze.c '
    )
    FREEZE_MODULE += ' Programs/_freeze_module.py'
    os.system(f'{FREEZE_MODULE} abc Lib/abc.py Python/frozen_modules/abc.h')
    os.system(f'{FREEZE_MODULE} codecs Lib/codecs.py Python/frozen_modules/codecs.h')
    os.system(f'{FREEZE_MODULE} io Lib/io.py Python/frozen_modules/io.h')
    os.system(f'{FREEZE_MODULE} _collections_abc Lib/_collections_abc.py Python/frozen_modules/_collections_abc.h')
    os.system(f'{FREEZE_MODULE} _sitebuiltins Lib/_sitebuiltins.py Python/frozen_modules/_sitebuiltins.h')
    os.system(f'{FREEZE_MODULE} genericpath Lib/genericpath.py Python/frozen_modules/genericpath.h')
    os.system(f'{FREEZE_MODULE} ntpath Lib/ntpath.py Python/frozen_modules/ntpath.h')
    os.system(f'{FREEZE_MODULE} posixpath Lib/posixpath.py Python/frozen_modules/posixpath.h')
    os.system(f'{FREEZE_MODULE} os Lib/os.py Python/frozen_modules/os.h')
    os.system(f'{FREEZE_MODULE} site Lib/site.py Python/frozen_modules/site.h')
    os.system(f'{FREEZE_MODULE} stat Lib/stat.py Python/frozen_modules/stat.h')
    os.system(f'{FREEZE_MODULE} importlib.util Lib/importlib/util.py Python/frozen_modules/importlib.util.h')
    os.system(f'{FREEZE_MODULE} importlib.machinery Lib/importlib/machinery.py Python/frozen_modules/importlib.machinery.h')
    os.system(f'{FREEZE_MODULE} runpy Lib/runpy.py Python/frozen_modules/runpy.h')
    os.system(f'{FREEZE_MODULE} __hello__ Lib/__hello__.py Python/frozen_modules/__hello__.h')
    os.system(f'{FREEZE_MODULE} __phello__ Lib/__phello__/__init__.py Python/frozen_modules/__phello__.h')
    os.system(f'{FREEZE_MODULE} __phello__.ham Lib/__phello__/ham/__init__.py Python/frozen_modules/__phello__.ham.h')
    os.system(f'{FREEZE_MODULE} __phello__.ham.eggs Lib/__phello__/ham/eggs.py Python/frozen_modules/__phello__.ham.eggs.h')
    os.system(f'{FREEZE_MODULE} __phello__.spam Lib/__phello__/spam.py Python/frozen_modules/__phello__.spam.h')
    os.system(f'{FREEZE_MODULE} frozen_only Tools/freeze/flag.py Python/frozen_modules/frozen_only.h')

    


# python library
srcs = LIBRARY_OBJS_OMIT_FROZEN + MODULE_OBJS + Modules + IOModules + [
        'Python/frozen.c',
        'Python/deepfreeze/deepfreeze.c',
        'Modules/getpath.c',
        'Godot/config.c',
    ]

env.SharedLibrary(ModuleName,
    source = srcs,
    cpppaths = includes,
    LIBS = libs
)
env.MSVSProject(target = ModuleName + env['MSVSPROJECTSUFFIX'],
    srcs = srcs,
    cpppaths = [includes],
    buildtarget = ModuleName + '.dll',
    variant = 'Debug|x64'
)


